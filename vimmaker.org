#+TITLE: Vim Maker script
#+AUTHOR: brickviking
#+EMAIL: brickviking@gmail.com

* Introduction
This is a simple script to create Vim from its source code. About the only thing missing from
this is a licence, I haven't come up with a usable licence yet.

:CONTENTS:
- [[#readme-in-org-format][Readme, in org format]]
- [[#main-file][Main file]]
  - [[#version-history][Version History]]
  - [[#header-and-changelog][Header and Changelog]]
  - [[#parameters][Parameters]]
  - [[#functions][Functions]]
    - [[#help-function][Help function]]
    - [[#update-source-tree-with-git][Update source tree with git]]
    - [[#patching][Patching]]
    - [[#cleaning-scripts][Cleaning scripts]]
    - [[#configure-compilation][Configure Vim for compilation]]
    - [[#make-commands][Make commands]]
    - [[#installuninstall][Install/uninstall]]
    - [[#running][Running]]
    - [[#do-everything][Do-everything section]]
  - [[#main-function][Main function]]
- [[#makefile][Makefile]]
- [[#conclusions][Conclusions]]
- [[#bits-to-add][Bits to add]]
:END:


* Readme, in org format
  :PROPERTIES:
  :header-args: org :tangle README.org
  :custom-id: readme-in-org-format
  :END:

#+BEGIN_SRC org -i
,* Introduction
This is a very simple wrapper script to clean, configure, make and install Vim.
Changes can be made to the variables inside the script, which will help drive how Vim can be
compiled and installed. It started life as emacsmake, but has since morphed. Funny, that.

,* Variables and requirements
First off, you'll need to install the source code to Vim, adjust =VIMCOMPILEHOME= in this script. You can either
fetch and extract a static tarball of the source, or you can access either the git repository or its Mercurial mirror.

Tarballs are usually a fixed point in the stage of Vim development, but git repositories often have
multiple threads of development, meaning there's a requirement to select the correct one if you
don't simply want to use the latest available code, often labeled the master branch. This is always
a moving target, so people often select a version branch, or perhaps a specific point in one of
those branches, such as an official release point.

Tarballs are created at these points, making them useful for snapshots where nothing much will
change in the future. It also means there's no expected future additions to that development unless
you make the effort to update on a regular basis.

If you grab code from the git or mercurial repositories, be aware that there are multiple branches of Vim code
that you can build, so check out what's available for compiling, select one, and you'll be off. You
will of course need to know how to use git or hg, and how to select the correct branch of Vim to
compile. Vim tends to do point releases each time, so if you grab the latest point-release tarball, that'll get you all the latest fixes—and possibly new bugs. Can't win them all, I guess.

,** Compile requirements
Because you're compiling Vim, you can choose which libraries to compile Vim with; adjust the
=VIMCONFIGPARAMS= array for this. You might want to check the output of =./configure --help= from
within the source directory to see what parameters are supported.

This will include choosing the place to put the compiled version of Vim, adjust =VIMHOME=. Note
that this is the root of the tree where the whole of Vim will eventually live, not the location of
the Vim binary itself. Usually directories will be created below this point for the libraries, the
binaries and the compiled script code to live. The usual place that is selected if you don't specify
it would be =/usr/local=, just as with a lot of other configure-based build systems.

If you're also going to compile with support for other things such as Motif, then make sure the 
required -dev/-devel packages are also installed. You'll probably want to include support for
interpreters such as python, perl and maybe even lua.

,* Executing Vim
Simply type in =vim= at the command line. That's it. For a graphical Vim, you can use gvim, or you
can use =vim -g= instead. I suspect one is symlinked to the other, though I haven't confirmed that.

,* Future directions
At this stage, I haven't got the foggiest idea what else I need, though I've already simplified this
by removing the whole "execute Vim" stage, leaving that up to the normal instructions.

The usual applies to anyone who wants to report bugs, issues or even suggestions with vimmaker,
check out the issues section of this project. If you want to report bugs with vim itself, go back
to the Vim project page.

#+END_SRC
* Main file
    :PROPERTIES:
    :header-args: bash :tangle vimmaker :tangle-mode (identity #o755)
    :CUSTOM_ID: main-file
    :END:

** Version history
    :PROPERTIES:
    :CUSTOM_ID: version-history
    :END:

+ v0.1 :: Initial cut, should be mostly complete.
+ v0.2 :: Changes to account for mistakes I made.
+ v0.3 :: rework of environment variables.
+ v0.4 :: added distclean, maintainerclean, and run everything.
+ v0.5 :: Renamed reference from emacs-sandbox to with-emacs as upstream has renamed.
+ v0.6 :: Finally added link to with-emacs.sh - it's about time.
     Added comment for checking number of args at runtime.
+ v0.7 :: Added in a do-almost-all (clean, configure, make).
+ v0.8 :: Added some commented out options (lucid and motif).
+ v0.8.1 :: Twiddled with config, error's only in the docs.
+ v0.8.2 :: fixed docs for config with ugly hack.
+ v0.9 :: Planning install upgrade to symlink the emacs binary to emacs-${VER}-$[WMGR}
+ v0.10 :: Reworked all the pushd/popd to be quiet, by redirecting their output to /dev/null.
+ v0.11 :: Created new param to combine make and install, deliberately doesn't include config.
+ v0.12 :: Begin process of pulling in vars from environment if already provided.
+ v0.13 :: Now we've got the main x-toolkit targets, how about --without-x?
+ v0.14v :: This has become a branch split off from the original emacsmake project, now
       called vimmaker and reversioned to 0.1
+ v0.15 :: Made some more Vim-specific tweaks to the README
+ v0.16 :: Changed vim in prose to Vim where it makes sense to.

** Header and Changelog
A few notes made about things added/changed, along with a long-term target to meet for Vim
versions earlier than 8. That rather depends on how far the commit history goes back.

#+BEGIN_SRC bash
#!/bin/bash
#
# v0.1 Initial clone from emacsmake-0.13, with a lot of tweaks to suit Vim project.
# v0.15 Made some more Vim-specific tweaks to the README.
# v0.16 Changed vim in prose to Vim where it makes sense to.
#
# TODO: rework to remove what's left of the emacsisms.
# TODO: bring up to parity with emacsmake.
#+END_SRC

** Parameters
  :PROPERTIES:
  :CUSTOM_ID: parameters
  :END:

So far, the only thing of note here is that we need a specific directory to be explicitly mentioned
so that calling this from sudo doesn't bork with messages such as:
#+BEGIN_QUOTE
/usr/local/bin/vimmaker: line 157: pushd: /root/src/c/vim: No such file or directory
#+END_QUOTE

Anyhow, there are some other tweakable values here which make sense.

Another thought—we could perhaps pull in our VIMCONFIGPARAMS from a created-at-first-run file.
The concept would be:
+ If we don't have a defaults file already
  + prompt user for "Choose, or defaults" (*)
  + write file back (for next time)
+ otherwise, read that file, and prompt user
  + Defaults are ....., do you wish to change these?
  + if so, select other defaults
  + write file back (for next time)

(*) We need to tweak VIMCOMPILEHOME, VIMHOME and VIMCONFIGPARAMS.

Currently variables just get set to whatever made sense in the script, but there's no reason why we
can't support env vars from the outside either.

I've also specifically changed the name of ex so it doesn't conflict with historical ex install.
There's a to-be-addressed issue about the gvim symlink only making sense for the last-installed vim,
(usually GTK3) and not other gui clients that are not GTK3 (GTK2/Motif).

#+BEGIN_SRC bash -i
#######################
# Modifiable parameters
# You WILL want to fiddle with these if you don't want the args I chose
# This WILL break if the user running (EUID) isn't the same as the user owning the source directory
# i.e. if there's no /root/src/c/vim
#VIMCOMPILEHOME="${HOME}/src/c/vim" # Should be specific, not user-relative

# Provide for the option to feed these vars in from the outside
# and allows us to pull in from somewhere else. This should be user-neutral.
VIMCOMPILEHOME=${VIMCOMPILEHOME:-"/h3/viking/src/c/hosts/github/vim/vim"}
# Place to put Vim (root of tree)
VIMHOME=${VIMHOME:-"/usr/local"}

# Default, but check the configMe functions further down. Can't feed this in from user's env.
# Currently this is mostly correct, I'm not sure if anything else needs adding.
# I've deliberately left out these two lines as they don't work for me yet:
#    "--enable-mzschemeinterp"
#    "--with-plthome=/usr/local"
# I've also specifically changed the name of ex so it doesn't conflict with historical ex install.

VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk3"
    "--prefix=${VIMHOME}"
)
# Default X toolkit if we don't change it with a -c{g2,g3,m,n} option
WMGR=gtk3
#+END_SRC

** Functions
    :PROPERTIES:
    :CUSTOM_ID: functions
    :END:

*** Help function
    :PROPERTIES:
    :CUSTOM_ID: help-function
    :END:

The boilerplate help just in case I forgot what switches I coded. Uses UNIX syntax (-x) not Microsoft (/x). GUI (gtk2, in this case) is enabled, but can be turned off in these settings.

#+BEGIN_SRC bash -i
###########
# Functions

# Help function, usage(), ugly hack to put in toolkits
VIMCONFIGPARAMSGTK2=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk2"
    "--prefix=${VIMHOME}"
)
VIMCONFIGPARAMSGTK3=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk3"
    "--prefix=${VIMHOME}"
)
VIMCONFIGPARAMSMOTIF=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=motif"
    "--prefix=${VIMHOME}"
)
VIMCONFIGPARAMSNOX=( # You know I just had to do it
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=no"
    "--prefix=${VIMHOME}"
)

helpMe() {
    echo "$0: Vim recompiler script"
    echo "   -h   help (this text)"
    echo "   -d   Runs 'make distclean'"
    echo "   -a   Runs  every step except execute"
    echo "   -e   run every step; distclean, configure, make, install, run"
    echo "        default Vim binary location is ${VIMHOME}"
    echo "   -c   run ./configure with params ${VIMCONFIGPARAMS[@]}"
    echo "        this selects something sensible for the target machine"
    echo "   -cg3 run ./configure with params ${VIMCONFIGPARAMSGTK3[@]}"
    echo "   -cg2 run ./configure with params ${VIMCONFIGPARAMSGTK2[@]}"
    echo "   -cm  run ./configure with params ${VIMCONFIGPARAMSMOTIF[@]}"
    echo "   -cn  run ./configure with params ${VIMCONFIGPARAMSNOX[@]}"
    echo "   -m   compile (no install), runs make"
    echo "   -i   install to ${VIMHOME}, runs make install"
    echo "   -mi  combines compile and install steps"
    echo "   -mat  make all the above toolkits (nox, motif, gtk2 and gtk3)"
    echo "   -u   uninstall from ${VIMHOME}, runs make uninstall"
}

#+END_SRC

*** Update source tree with git
    :PROPERTIES:
    :CUSTOM_ID: update-source-tree-with-git
    :END:

Patching (of course) will generally be up to the user. This will just run "git pull" at the top of the tree
for the currently-selected branch. We should run make distclean first before we git pull.
Unfortunately, this doesn't handle patched-already files. It also doesn't work with a tree that didn't
come from git, such as a source tarball extraction.

#+BEGIN_SRC bash -i
# This can generally update the git tree in the manner prescribed by the user.
gitMe() {
    make distclean # This just makes sure that we have no stray files left lying around
    git pull # This doesn't take account of patch files already applied.
}

#+END_SRC

*** Patching
    :PROPERTIES:
    :CUSTOM_ID: patching
    :END:

I have no patches at the moment, but I'll add the possibility to the code nonetheless.

#+BEGIN_SRC bash -i
# This can generally patch the source tree in the manner prescribed by the user.
# Leave suitable patches in the patches/ directory.
# This does not take account of already-patched files. Beware. May error
# if there are no patch files.
patchMe() {
    for t in patches/*.patch; do
       patch -p1<${t}
    done
}

# This is meant to apply the patches in reverse order. Errors if there are none.
unPatchMe() {
    local demFiles=(patches/*.patch)
#    for t in patches/*.patch; do
     for ((t=${#demFiles[@]}-1; t>=0; t--)); do
        patch -Rp1<${demFiles[$t]}
    done
}

#+END_SRC

*** Cleaning scripts distclean/maintainer-clean
    :PROPERTIES:
    :CUSTOM_ID: cleaning-scripts-distclean
    :END:

Clean basically removes anything compiled from the source code, and distclean removes 
everything that was generated, leaving only the original code as delivered.  I'm not
sure about the distinction, though I used to know. One point I've noted is that neither command is
gatekeepered, i.e. they both take immediate effect without the ability to back out.

#+BEGIN_SRC bash -i
# Runs make clean, but only if the configure step had created a Makefile.
# TODO: no chance to break out of this, perhaps we should offer that
cleanMe() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make clean
    else
	echo "Makefile not found, skipping"
    fi
}

# Same proviso as above, this command takes immediate effect
cleanMeGood() {
    if [[ -f Makefile ]]; then
	echo "This will REMOVE all compiled files including makefiles"
	make distclean
    else
	echo "Makefile not found, skipping"
    fi
}
#+END_SRC

*** Configure Vim for compilation
  :PROPERTIES:
  :CUSTOM_ID: configure-compilation
  :END:

It's pretty obvious what this does, though it does presume we're in the correct directory, which we
should be by the time we get here. Heck, if we weren't, something went badly wrong.

I learned to specify the location of the configure directly, so I don't accidentally pick up on a
preinstalled configure somewhere in the ${PATH}.

#+BEGIN_SRC bash -i
# Runs configure phase, runs autogen if configure isn't here already
# This just does GTK3 unless VIMCONFIGPARAMS[] is changed from a calling function
configMe() {
    if [[ -f ./configure ]]; then
        CFLAGS="-fPIC" ./configure "${VIMCONFIGPARAMS[@]}"
    else
        # Is this even relevant for Vim?
        ./autogen.sh # fails if autotools not installed
        if [[ ! -f configure ]]; then
            echo "Failed to create configure, do you have autotools installed?"
        else
            CFLAGS="-fPIC" ./configure "${VIMCONFIGPARAMS[@]}"
        fi
    fi
}

# Should support the GTK1 crowd but here, just grabs gtk3
configMeGTK() {
VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk3"   # because gtk2 is ever so slightly broken here
    "--prefix=${VIMHOME}" )
    WMGR=gtk # (might be gtk3)
    configMe
}

# Should support the GTK2 crowd too
configMeGTK2() {
VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk2"
    "--prefix=${VIMHOME}" )
    WMGR=gtk2
    configMe
}


# Default unless something else chosen, simply call configMe
configMeGTK3() {
VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=gtk3"
    "--prefix=${VIMHOME}" )
    WMGR=gtk3
    configMe
}

# Choose this if you actually have a Motif or LessTif
configMeMotif() {
VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=motif"
    "--prefix=${VIMHOME}" )
    WMGR=motif
    configMe
}

# Choose this if you don't want a Vim with X (creates vim-nox)
configMeNoX() {
VIMCONFIGPARAMS=(
    "--enable-luainterp=dynamic"
    "--enable-perlinterp=dynamic"
    "--enable-pythoninterp=dynamic"
    "--enable-python3interp=dynamic"
    "--enable-rubyinterp=dynamic"
    "--enable-tclinterp=dynamic"
    "--disable-selinux"
    "--enable-cscope"
    "--enable-terminal"
    "--with-tlib=ncurses"
    "--with-ex-name=viex"
    "--enable-gui=no"
    "--prefix=${VIMHOME}" )
    WMGR=nox
    configMe
}

#+END_SRC

*** Make command
    :PROPERTIES:
    :CUSTOM_ID: make-commands
    :END:


There's nothing much of note here, just that I use four cores to compile with. You may have more
cores you wish to throw at compiling.

#+BEGIN_SRC bash -i
# Runs make (hopefully we ran configure first)
makeMe() {
    if [[ -f Makefile ]]; then
	make -j4 # because we want it faster
    else
	echo "No Makefile found, perhaps run with -c/-cn/-cm/-cg2/-cg3 first?"
    fi
}
#+END_SRC


This function assumes that because we want "everything", that is, all the toolkits, it also
assumes that we'll have run distclean, git, patch before entering this.

This should do the following:
+ nox. (-cn, -m, -i)
+ motif (-cm, make -j4, -i); from here, don't run bootstrap (speeds things up)
+ gtk2 (-cg2, make -j4, -i)
+ gtk3 (-c, make -j4, -i); we install this last so it ends up being the default

#+BEGIN_SRC bash -i
# Yes, we want to make and install all the toolkits
makeAllToolkits() {
    # First, the -nox (the next ones don't really matter what order)
    configMeNoX
    makeMe
    installMe
    # Then motif, no need to rebuild .elc, but *.eln could be a problem
    configMeMotif
    makeMe
    installMe
    # gtk2
    configMeGTK2
    makeMe
    installMe
    # and last, the default of gtk3
    configMeGTK3
    makeMe
    installMe
}
#+END_SRC

*** Install/uninstall
    :PROPERTIES:
    :CUSTOM_ID: installuninstall
    :END:


This is a way to find out what I already compiled, if I compiled it. We start off with a default
of gtk3 in WMGR, which only changes if we find something specific. We don't really have to cut
off the pattern itself and it would save us a step through cut.

If we compiled without a toolkit altogether, this will have to be added to, as there'd be no other
switches to look for.

Now this function might be a bit superfluous, as the config.log might not exist here. So I'll need
to reconsider how this will work. At the moment, it'll merely say I haven't run configure.

#+BEGIN_SRC bash -i
# Find what I made already, this is normally called from installMe
whatMadeMe() {
    # Piece to load into an array so I can parse the --with-x-toolkit parameter
    # VERY sensitive to configure output - if it changes, then this won't work.
    # If I search for $ ./configure I'll find the right line.
    if [[ -f src/auto/config.log ]]; then
        pushd src/auto >/dev/null # don't forget to popd after this
        mapfile -t TOOLKIT < <(sed -n '/\$ auto\/configure/p' config.log | cut -c17-)
        popd >/dev/null
        for this in ${TOOLKIT[@]}; do
            case "${this}" in
                "--enable-gui=gtk") WMGR=gtk ;; # Works out to be gtk3 here
                "--enable-gui=gtk2") WMGR=gtk2 ;;
                "--enable-gui=gtk3") WMGR=gtk3 ;;
                "--enable-gui=motif") WMGR=motif ;;
                "--enable-gui=no") WMGR=nox ;; # No X gui here, just terminal/ncurses.
            esac # We can simply ignore everything else
        done # for this in ${TOOLKIT}
        printf "Toolkit is: %s\n" ${WMGR}
    else
        echo "I don't think you ran configure in ${VIMCOMPILEHOME}. Please rerun vimmaker with a -c parameter"
        popd >/dev/null # just to keep the stack straight
        exit 1 # Shouldn't really exit here
    fi
}
#+END_SRC

This piece copies the generated Vim binary at the destination to a backup that has the X toolkit
name appended.

#+BEGIN_SRC bash -i
# This copies the delivered binary ${VIMHOME}/bin/vim to vim-${VERSION}-$[WMGR}
# which will be something like vim-{gtk2,gtk3,motif}
# May not work for versions earlier than 8
copyMe() {
    # If we fail to find a Vim here, we failed to install
    if [[ -f ${VIMHOME}/bin/vim ]]; then
        VIMTGT="${VIMHOME}/bin/vim"
        echo "Copying ${VIMTGT} to ${VIMTGT}-${WMGR}"
        # There should perhaps be a sudo/doas here
        sudo cp -v ${VIMTGT} ${VIMTGT}-${WMGR}
    else
        echo "$0: we couldn't find a Vim at ${VIMHOME} or ${WMGR} isn't set."
    fi
}

#+END_SRC

This should by rights require the user to use sudo for this phase, but I have no clue as to what's
on a target machine for sudo permissions, if the user even has sudo rights.  Otherwise, it's a stock
standard install-vim-to-target-directory at ${VIMHOME} specified earlier in the PARAMS section.
One point not in the defaults is to copy the binary to a file that has the toolkit embedded in the
name.

#+BEGIN_SRC bash -i
# Runs the install phase (currently don't need sudo, but would have normally done)
installMe() {
    # echo "This will require you to enter in your password" # only needed for system dirs
    # sudo make install
    # TODO: should check that there's a Vim binary first, but I don't know where that will be
    # First, find out what we made from what's been left behind in the last compile
    whatMadeMe
    if [[ -z ${WMGR} ]]; then
        echo "No toolkit selected (not even -nox), you should probably have run vimmaker -c"
    fi
    # There should perhaps be a sudo/doas here
    sudo make install
    copyMe
}

# Uninstall from $VIMHOME
uninstallMe() {
    # The only requirements are that I've installed Vim at VIMHOME
    # and NOT reconfigured Vim since
    if [[ -f "${VIMHOME}/bin/vim" ]]; then
        make uninstall
    else
        echo "Are you sure you installed Vim to ${VIMHOME}?"
    fi
}

#+END_SRC

*** Running
    :PROPERTIES:
    :CUSTOM_ID: running
    :END:

This runs the just-installed Vim. Realistically I don't need this unless I was trying to test
some configuration and didn't want to clobber the existing .vimrc or .vim/* files.

#+BEGIN_SRC bash -i
# Assuming everything else is done, runs compiled Vim from install
runMe() {
    pushd "${VIMHOME}"
    # Hm. What do I do here? with-emacs won't run Vim. 
    RETVAL=$( with-emacs.sh "${VIMRUNARGS[@]}" )
    if [[ "${RETVAL}" != 0 ]]; then
        echo "Completed with ${RETVAL}"
    else
        echo "Completed with success"
    fi
    popd >/dev/null
}
#+END_SRC

*** Do-everything section
    :PROPERTIES:
    :CUSTOM_ID: do-everything
    :END:

To call this, we just string all the sections together in a sequence. I've made no attempt to
support multiple stages, and have explicitly disallowed this by only allowing one arg down further
in main().

#+BEGIN_SRC bash -i
# Do almost everything
execMakeMe() {
    cleanMe # it's a clean, not a distclean
    configMe
    makeMe
}

# Do everything except runMe - may require sudo
execMe() {
    execMakeMe # distclean, config and make
    installMe # Don't add copyMe to this, it's called from here already
#    runMe
}

#+END_SRC

** Main
    :PROPERTIES:
    :CUSTOM_ID: main-function
    :END:


This handles the arg matching. We explicitly disallow multiple stages from being run, as we need to
process things in a certain order and it's too complex for me to track what stages I've set,
especially if I try doing install folllowed by uninstall, we'd have to reorder this so the uninstall
was done first even if we specified it last. After all, there's absolutely no point in installing
all of it only to uninstall it six seconds later.

I've also not made any attempt at using getopts, as I feel it's simply quicker to roll my own.
However, I could have used short/long switches like the following:

#+BEGIN_QUOTE bash -i
# Need a getopts-style processor here, or I could simply roll my own. Quicker to roll.
# args=$(getopt -n "$0" -o cdDhmiru -l config,distclean,help,make,install,run,uninstall -- "$@") || { usage; exit 1; }

# eval set -- "$args"
# The while true won't work, as we need to run steps in order, not in the order the args are processed.
# TODO: we could handle multiple x/y/z in order, like this:
#    each arg read, sets val, then 
#+END_QUOTE

The -e:/--emacs: switch was the precursor for the "run Vim from this location instead" function
from with-emacs.sh, but as the script does stuff better than I would have done, I left that up to
the secondary script. It's not written by me, and the style is quite different - presumably someone
who knows what they're doing.

#+BEGIN_SRC bash -i
########
# main()

if [[ -n $2 ]]; then # In short, if 2 or more args
    echo "$0: Too many arguments, we only need one of the following"
    helpMe
elif [[ -n $1 ]]; then
    case $1 in 
        "-h"|"--help"|"-?") helpMe ;;
        "-d") pushd "${VIMCOMPILEHOME}" >/dev/null
              cleanMe
              popd >/dev/null ;;
	"-D") pushd "${VIMCOMPILEHOME}" >/dev/null
              cleanMeGood
              popd >/dev/null ;;
        "-g") pushd "${VIMCOMPILEHOME}" >/dev/null
              gitMe
              popd >/dev/null ;;
        "-a") pushd "${VIMCOMPILEHOME}" >/dev/null
              execMakeMe
              popd >/dev/null ;;
        "-e") pushd "${VIMCOMPILEHOME}" >/dev/null # Eventually changes to ${VIMHOME}
              execMe
              popd >/dev/null ;;
        "-c") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMe
              popd >/dev/null ;; # Uses GTK3 with xwidgets
        "-cg") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMeGTK
              popd >/dev/null ;;
        "-cg2") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMeGTK2
              popd >/dev/null ;;
        "-cg3") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMeGTK3
              popd >/dev/null ;;
        "-cm") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMeMotif
              popd >/dev/null ;;
        "-cn") pushd "${VIMCOMPILEHOME}" >/dev/null
              configMeNoX
              popd >/dev/null ;;
        "-m") pushd "${VIMCOMPILEHOME}" >/dev/null
              makeMe
              popd >/dev/null ;;
        "-i") pushd "${VIMCOMPILEHOME}" >/dev/null
              installMe
              popd >/dev/null ;;
        # This makes all the relevant toolkits (motif, nox, gtk2/gtk3)
        "-mat") pushd "${VIMCOMPILEHOME}" >/dev/null
              makeAllToolkits
              popd >/dev/null ;;
        # Let's do this all here
        "-mi") pushd "${VIMCOMPILEHOME}">/dev/null
              makeMe
              installMe
              popd >/dev/null ;;
        "-r") pushd "${VIMHOME}">/dev/null
              runMe
              popd >/dev/null ;;
	"-u") pushd "${VIMCOMPILEHOME}" >/dev/null
              uninstallMe
              popd >/dev/null ;;
        # Find out what we have before
        "-w") pushd "${VIMCOMPILEHOME}" >/dev/null
              whatMadeMe
              popd >/dev/null ;;
        ,*) pushd "."
              helpMe ;;
    esac
else # We don't have $1
    helpMe
fi

echo "Ending... bye"

#+END_SRC
* Makefile
    :PROPERTIES:
    :header-args: makefile :tangle Makefile
    :END:

This is a dirt-simple Makefile that will hopefully install vimmake into a system-wide location.
It will need several runs at this, and I need to remember that recipes start off with a flush-left
line, followed by tabbed recipe instructions.

I deliberately haven't used "install" as I don't know what it does. I've also embedded a sudo inside
the makefile, which probably isn't a great idea either, but hey, it's my own machine. This is also
not for use on a Windows or MS-DOS/FreeDOS install. Free/NetBSD will probably need doas, not sudo.
To be frank, it doesn't care where it's put, as long as it can be called from somewhere on the
user's PATH.

Bear in mind that all the major Linux distributions have Vim in their repositories, and Vim is
most definitely in the BSD ports.

One other thing? It takes absolutely no notice of any other path but DESTDIR.

#+BEGIN_SRC makefile -i
# Dirt-simple Makefile to install the vimmaker script
# v0.1 Initial cut - it only has to install one thing.

DESTDIR = /usr/local/bin

install: vimmaker
	@sudo cp -v vimmaker ${DESTDIR}/
	@sudo chmod -v +x ${DESTDIR}/vimmaker

uninstall:
	@sudo rm -v ${DESTDIR}/vimmaker


#+END_SRC

* Conclusions
    :PROPERTIES:
    :CUSTOM_ID: conclusions
    :END:

This was originally a fairly clean script, which would have been easy enough to understand without
the extra descriptions. There's not a lot to this one, but I felt I needed to add a little
clarification at certain spots. I've also tried to make it more "portable" between Vim versions.

There's also no config file, and one could be used to help clean the script up. Reasonable defaults
would still be needed.

* Bits to add
    :PROPERTIES:
    :CUSTOM_ID: bits-to-add
    :END:

Select interpreter support for scripts, such as whether we need python/perl/lua/etc. So far it's
pre-canned.
