* Introduction
This is a very simple wrapper script to clean, configure, make and install Vim.
Changes can be made to the variables inside the script, which will help drive how Vim can be
compiled and installed. It started life as emacsmake, but has since morphed. Funny, that.

* Variables and requirements
First off, you'll need to install the source code to Vim, adjust =VIMCOMPILEHOME= in this script. You can either
fetch and extract a static tarball of the source, or you can access either the git repository or its Mercurial mirror.

Tarballs are usually a fixed point in the stage of Vim development, but git repositories often have
multiple threads of development, meaning there's a requirement to select the correct one if you
don't simply want to use the latest available code, often labeled the master branch. This is always
a moving target, so people often select a version branch, or perhaps a specific point in one of
those branches, such as an official release point.

Tarballs are created at these points, making them useful for snapshots where nothing much will
change in the future. It also means there's no expected future additions to that development unless
you make the effort to update on a regular basis.

If you grab code from the git or mercurial repositories, be aware that there are multiple branches of Vim code
that you can build, so check out what's available for compiling, select one, and you'll be off. You
will of course need to know how to use git or hg, and how to select the correct branch of Vim to
compile. Vim tends to do point releases each time, so if you grab the latest point-release tarball, that'll get you all the latest fixesâ€”and possibly new bugs. Can't win them all, I guess.

** Compile requirements
Because you're compiling Vim, you can choose which libraries to compile Vim with; adjust the
=VIMCONFIGPARAMS= array for this. You might want to check the output of =./configure --help= from
within the source directory to see what parameters are supported.

This will include choosing the place to put the compiled version of Vim, adjust =VIMHOME=. Note
that this is the root of the tree where the whole of Vim will eventually live, not the location of
the Vim binary itself. Usually directories will be created below this point for the libraries, the
binaries and the compiled script code to live. The usual place that is selected if you don't specify
it would be =/usr/local=, just as with a lot of other configure-based build systems.

If you're also going to compile with support for other things such as Motif, then make sure the 
required -dev/-devel packages are also installed. You'll probably want to include support for
interpreters such as python, perl and maybe even lua.

* Executing Vim
Simply type in =vim= at the command line. That's it. For a graphical Vim, you can use gvim, or you
can use =vim -g= instead. I suspect one is symlinked to the other, though I haven't confirmed that.

* Future directions
At this stage, I haven't got the foggiest idea what else I need, though I've already simplified this
by removing the whole "execute Vim" stage, leaving that up to the normal instructions.

The usual applies to anyone who wants to report bugs, issues or even suggestions with vimmaker,
check out the issues section of this project. If you want to report bugs with vim itself, go back
to the Vim project page.
